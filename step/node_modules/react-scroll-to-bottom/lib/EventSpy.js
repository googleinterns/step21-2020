"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _debounce = _interopRequireDefault(require("./debounce"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventSpy = function EventSpy(_ref) {
  var debounce = _ref.debounce,
      name = _ref.name,
      onEvent = _ref.onEvent,
      target = _ref.target;
  // We need to save the "onEvent" to ref.
  // This is because "onEvent" may change from time to time, but debounce may still fire to the older callback.
  var onEventRef = (0, _react.useRef)();
  onEventRef.current = onEvent;
  var debouncer = (0, _react.useMemo)(function () {
    return (0, _debounce.default)(function (event) {
      var current = onEventRef.current;
      current && current(event);
    }, debounce);
  }, [debounce, onEventRef]);
  var handleEvent = (0, _react.useCallback)(function (event) {
    event.timeStampLow = Date.now();
    debouncer(event);
  }, [debouncer]);
  (0, _react.useLayoutEffect)(function () {
    target.addEventListener(name, handleEvent, {
      passive: true
    });
    handleEvent({
      target: target,
      type: name
    });
    return function () {
      return target.removeEventListener(name, handleEvent);
    };
  }, [name, handleEvent, target]);
  return false;
};

EventSpy.defaultProps = {
  debounce: 200
};
var _default = EventSpy;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudFNweS5qcyJdLCJuYW1lcyI6WyJFdmVudFNweSIsImRlYm91bmNlIiwibmFtZSIsIm9uRXZlbnQiLCJ0YXJnZXQiLCJvbkV2ZW50UmVmIiwiY3VycmVudCIsImRlYm91bmNlciIsImV2ZW50IiwiaGFuZGxlRXZlbnQiLCJ0aW1lU3RhbXBMb3ciLCJEYXRlIiwibm93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJ0eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7O0FBRUEsSUFBTUEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsT0FBeUM7QUFBQSxNQUF0Q0MsUUFBc0MsUUFBdENBLFFBQXNDO0FBQUEsTUFBNUJDLElBQTRCLFFBQTVCQSxJQUE0QjtBQUFBLE1BQXRCQyxPQUFzQixRQUF0QkEsT0FBc0I7QUFBQSxNQUFiQyxNQUFhLFFBQWJBLE1BQWE7QUFDeEQ7QUFDQTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxvQkFBbkI7QUFFQUEsRUFBQUEsVUFBVSxDQUFDQyxPQUFYLEdBQXFCSCxPQUFyQjtBQUVBLE1BQU1JLFNBQVMsR0FBRyxvQkFDaEI7QUFBQSxXQUNFLHVCQUFXLFVBQUFDLEtBQUssRUFBSTtBQUFBLFVBQ1ZGLE9BRFUsR0FDRUQsVUFERixDQUNWQyxPQURVO0FBR2xCQSxNQUFBQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsS0FBRCxDQUFsQjtBQUNELEtBSkQsRUFJR1AsUUFKSCxDQURGO0FBQUEsR0FEZ0IsRUFPaEIsQ0FBQ0EsUUFBRCxFQUFXSSxVQUFYLENBUGdCLENBQWxCO0FBVUEsTUFBTUksV0FBVyxHQUFHLHdCQUNsQixVQUFBRCxLQUFLLEVBQUk7QUFDUEEsSUFBQUEsS0FBSyxDQUFDRSxZQUFOLEdBQXFCQyxJQUFJLENBQUNDLEdBQUwsRUFBckI7QUFFQUwsSUFBQUEsU0FBUyxDQUFDQyxLQUFELENBQVQ7QUFDRCxHQUxpQixFQU1sQixDQUFDRCxTQUFELENBTmtCLENBQXBCO0FBU0EsOEJBQWdCLFlBQU07QUFDcEJILElBQUFBLE1BQU0sQ0FBQ1MsZ0JBQVAsQ0FBd0JYLElBQXhCLEVBQThCTyxXQUE5QixFQUEyQztBQUFFSyxNQUFBQSxPQUFPLEVBQUU7QUFBWCxLQUEzQztBQUNBTCxJQUFBQSxXQUFXLENBQUM7QUFBRUwsTUFBQUEsTUFBTSxFQUFOQSxNQUFGO0FBQVVXLE1BQUFBLElBQUksRUFBRWI7QUFBaEIsS0FBRCxDQUFYO0FBRUEsV0FBTztBQUFBLGFBQU1FLE1BQU0sQ0FBQ1ksbUJBQVAsQ0FBMkJkLElBQTNCLEVBQWlDTyxXQUFqQyxDQUFOO0FBQUEsS0FBUDtBQUNELEdBTEQsRUFLRyxDQUFDUCxJQUFELEVBQU9PLFdBQVAsRUFBb0JMLE1BQXBCLENBTEg7QUFPQSxTQUFPLEtBQVA7QUFDRCxDQWxDRDs7QUFvQ0FKLFFBQVEsQ0FBQ2lCLFlBQVQsR0FBd0I7QUFDdEJoQixFQUFBQSxRQUFRLEVBQUU7QUFEWSxDQUF4QjtlQUllRCxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUxheW91dEVmZmVjdCwgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgZGVib3VuY2VGbiBmcm9tICcuL2RlYm91bmNlJztcblxuY29uc3QgRXZlbnRTcHkgPSAoeyBkZWJvdW5jZSwgbmFtZSwgb25FdmVudCwgdGFyZ2V0IH0pID0+IHtcbiAgLy8gV2UgbmVlZCB0byBzYXZlIHRoZSBcIm9uRXZlbnRcIiB0byByZWYuXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBcIm9uRXZlbnRcIiBtYXkgY2hhbmdlIGZyb20gdGltZSB0byB0aW1lLCBidXQgZGVib3VuY2UgbWF5IHN0aWxsIGZpcmUgdG8gdGhlIG9sZGVyIGNhbGxiYWNrLlxuICBjb25zdCBvbkV2ZW50UmVmID0gdXNlUmVmKCk7XG5cbiAgb25FdmVudFJlZi5jdXJyZW50ID0gb25FdmVudDtcblxuICBjb25zdCBkZWJvdW5jZXIgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBkZWJvdW5jZUZuKGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50IH0gPSBvbkV2ZW50UmVmO1xuXG4gICAgICAgIGN1cnJlbnQgJiYgY3VycmVudChldmVudCk7XG4gICAgICB9LCBkZWJvdW5jZSksXG4gICAgW2RlYm91bmNlLCBvbkV2ZW50UmVmXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUV2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgZXZlbnQgPT4ge1xuICAgICAgZXZlbnQudGltZVN0YW1wTG93ID0gRGF0ZS5ub3coKTtcblxuICAgICAgZGVib3VuY2VyKGV2ZW50KTtcbiAgICB9LFxuICAgIFtkZWJvdW5jZXJdXG4gICk7XG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVFdmVudCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIGhhbmRsZUV2ZW50KHsgdGFyZ2V0LCB0eXBlOiBuYW1lIH0pO1xuXG4gICAgcmV0dXJuICgpID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZUV2ZW50KTtcbiAgfSwgW25hbWUsIGhhbmRsZUV2ZW50LCB0YXJnZXRdKTtcblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5FdmVudFNweS5kZWZhdWx0UHJvcHMgPSB7XG4gIGRlYm91bmNlOiAyMDBcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50U3B5O1xuIl19